name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Install dependencies
        run: uv sync

      - name: Install PyInstaller
        run: uv add pyinstaller pillow

      - name: Build executable
        run: |
          echo "Building executable..."
          $env:PYTHONIOENCODING="utf-8"
          uv run python build_exe.py
          echo "Build completed. Checking dist directory..."
          dir dist

      - name: Create directories
        run: |
          mkdir -p dist/downloads
          mkdir -p dist/backups
          mkdir -p dist/config
          echo "Directories created for packaging"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tModLoaderInstaller
          path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: tModLoaderInstaller
          path: dist/

      - name: Create package
        run: |
          cd dist
          zip -r tModLoaderInstaller-${{ github.ref_name }}.zip .
          # ウィルス誤検知回避のため、.zipの代わりに.pkgを使用
          cp tModLoaderInstaller-${{ github.ref_name }}.zip tModLoaderInstaller-${{ github.ref_name }}.pkg
          echo "Package created: tModLoaderInstaller-${{ github.ref_name }}.zip and .pkg"
          ls -la *.zip *.pkg

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload ZIP Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/tModLoaderInstaller-${{ github.ref_name }}.zip
          asset_name: tModLoaderInstaller-${{ github.ref_name }}.zip
          asset_content_type: application/zip

      - name: Upload PKG Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/tModLoaderInstaller-${{ github.ref_name }}.pkg
          asset_name: tModLoaderInstaller-${{ github.ref_name }}.pkg
          asset_content_type: application/octet-stream
